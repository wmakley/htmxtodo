//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Item = newItemTable("public", "item", "")

type itemTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	ListID    postgres.ColumnInteger
	Position  postgres.ColumnInteger
	Name      postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ItemTable struct {
	itemTable

	EXCLUDED itemTable
}

// AS creates new ItemTable with assigned alias
func (a ItemTable) AS(alias string) *ItemTable {
	return newItemTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ItemTable with assigned schema name
func (a ItemTable) FromSchema(schemaName string) *ItemTable {
	return newItemTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ItemTable with assigned table prefix
func (a ItemTable) WithPrefix(prefix string) *ItemTable {
	return newItemTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ItemTable with assigned table suffix
func (a ItemTable) WithSuffix(suffix string) *ItemTable {
	return newItemTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newItemTable(schemaName, tableName, alias string) *ItemTable {
	return &ItemTable{
		itemTable: newItemTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newItemTableImpl("", "excluded", ""),
	}
}

func newItemTableImpl(schemaName, tableName, alias string) itemTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		ListIDColumn    = postgres.IntegerColumn("list_id")
		PositionColumn  = postgres.IntegerColumn("position")
		NameColumn      = postgres.StringColumn("name")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, ListIDColumn, PositionColumn, NameColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{ListIDColumn, PositionColumn, NameColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return itemTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ListID:    ListIDColumn,
		Position:  PositionColumn,
		Name:      NameColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
